# Задание-1: уравнение прямой вида y = kx + b задано в виде строки.
# Определить координату y точки с заданной координатой x.

equation = 'y = -12x + 11111140.2121'
x = 2.5
# вычислите и выведите y
"""
Создал пустой список.
Преобразовал уравнение из строки в список, т.к. строки неизменяемые и добавить
знак умножения не получится.
В списке добавил знак умножения перед X, найдя X по индексу.
Преобразовал нужную часть списка обратно в строку.
Воспользовался функцией eval из стандартной библиотеки, для вычисления X
"""
equationList = []
for i in equation:
    equationList.append(i)
equationList.insert(equationList.index('x'), '*')
equationCorrect = ''.join(equationList[equationList.index('=') + 1:])
y = eval(equationCorrect)
print(y)


# Задание-2: Дата задана в виде строки формата 'dd.mm.yyyy'.
# Проверить, корректно ли введена дата.
# Условия корректности:
# 1. День должен приводиться к целому числу в диапазоне от 1 до 30(31)
#  (в зависимости от месяца, февраль не учитываем)
# 2. Месяц должен приводиться к целому числу в диапазоне от 1 до 12
# 3. Год должен приводиться к целому положительному числу в диапазоне от 1 до 9999
# 4. Длина исходной строки для частей должна быть в соответствии с форматом
#  (т.е. 2 символа для дня, 2 - для месяца, 4 - для года)

# Пример корректной даты
date = '01.11.1985'

# Примеры некорректных дат
date = '01.22.1001'
date = '1.12.1001'
date = '-2.10.3001'

day = date[:2]
month = date[3:5]
year = date[6:]

if len(date) != 10 or len(day) != 2 or len(month) != 2 or len(year) != 4:
    print('Некорректная дата.')

day = int(date[:2])
if day not in range(1, 32):
    print('Неверно указан день.')

month = int(date[3:5])
if month not in range(1, 13):
    print('Неверно указан месяц.')

year = int(date[6:])
if year not in range(1, 10000):
    print('Неверно указан год.')



# Задание-3: "Перевёрнутая башня" (Задача олимпиадного уровня)
#
# Вавилонцы решили построить удивительную башню —
# расширяющуюся к верху и содержащую бесконечное число этажей и комнат.
# Она устроена следующим образом — на первом этаже одна комната,
# затем идет два этажа, на каждом из которых по две комнаты,
# затем идёт три этажа, на каждом из которых по три комнаты и так далее:
#         ...
#     12  13  14
#     9   10  11
#     6   7   8
#       4   5
#       2   3
#         1
#
# Эту башню решили оборудовать лифтом --- и вот задача:
# нужно научиться по номеру комнаты определять,
# на каком этаже она находится и какая она по счету слева на этом этаже.
#
# Входные данные: В первой строчке задан номер комнаты N, 1 ≤ N ≤ 2 000 000 000.
#
# Выходные данные:  Два целых числа — номер этажа и порядковый номер слева на этаже.
#
# Пример:
# Вход: 13
# Выход: 6 2
#
# Вход: 11
# Выход: 5 3

"""
Ниже моё первое решение задачи. Делал без подсказок.
Вышло ресурсоёмко и вычисление происходило долго.
Но само решение показалось мне интересным, поэтому решил оставить.

Сначала генерируется список списков(ну или массив массивов) и заполняется нулями.
Затем происходит итерация по спискам внутри списка с подсчётом количества итераций.
Когда счётчик доходит до нужного значения(номер комнаты).
Выводятся его координаты.
"""


room = int(input('Введите номер нужной комнаты: '))
tower = []
n = 0
while len(tower) < room:
    for i in range(n):
        tower.append([0]*n)
    n += 1
counter = 0
for i in range(len(tower)):
    for j in range(len(tower[i])):
        if tower[i][j] == 0:
            counter += 1
            if counter == room:
                print(i + 1, j + 1)
                break



# Этот вариант получше. Но для решения, просил подсказку у наставника ну и гугл, куда же без него.


room = int(input('Введите номер нужной комнаты: '))
tower = [[], ]
floor = 0
floorRooms = 0
cell = 1
for i in range(1, room + 1):
    if len(tower[-1]) == floorRooms:
        floor += 1
        tower.append([])
    if i == cell:
        cell = cell + ((floorRooms + 1)**2)
        floorRooms += 1
    tower[-1].append(i)
print(floor, tower[floor].index(room) + 1)